version: 2

docker_defaults: &docker_defaults
    working_directory: /go/src/github.com/L-oris/go-heroku-continuous_deployment
    docker:
        - image: circleci/golang:1.10.3

restore_cache: &restore_cache
    restore_cache:
        keys:
            - deps-{{ arch }}-{{ .Branch }}-{{ checksum "Gopkg.lock" }}

save_cache: &save_cache
    save_cache:
        key: deps-{{ arch }}-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
        paths:
            - /go/pkg/dep/
            - /go/src/github.com/L-oris/go-heroku-continuous_deployment/vendor/

run_build: &run_build
    run: go get -u github.com/golang/dep/cmd/dep
    run:
          name: Build
          command: |
              dep ensure
              go build -v

run_fmt: &run_fmt
    run:
          name: Fmt
          command: |
              go fmt ./...

run_vet: &run_vet
    run:
          name: Vet
          command: |
              go vet ./...

run_test: &run_test
    run:
          name: Test
          command: |
              go test -v ./...

run_deploy: &run_deploy
    run:
          name: Deploy to Heroku
          command: |
              # disable warning: "The authenticity of host 'heroku.com (50.19.xx.xxx)' can't be established"
              echo "StrictHostKeyChecking no" >> ~/.ssh/config
              git push "git@heroku.com:${HEROKU_APP_NAME}.git" master

jobs:
    build:
        <<: *docker_defaults
        steps:
            - checkout
            - *restore_cache
            - *run_build
            - *save_cache

    fmt:
        <<: *docker_defaults
        steps:
            - checkout
            - *restore_cache
            - *run_fmt
    
    vet:
        <<: *docker_defaults
        steps:
            - checkout
            - *restore_cache
            - *run_vet

    test:
        <<: *docker_defaults
        steps:
            - checkout
            - *restore_cache
            - *run_test

    deploy:
        <<: *docker_defaults
        steps:
            - checkout
            - *run_deploy

workflows:
    version: 2
    build-deploy:
        jobs:
            - build
            - fmt:
                  requires:
                      - build
            - vet:
                  requires:
                      - build
            - test:
                  requires:
                      - build
            - hold:
                  type: approval
                  requires:
                      - fmt
                      - vet
                      - test
                  filters:
                      branches:
                          only:
                              - master
            - deploy:
                  requires:
                      - hold
                  filters:
                      branches:
                          only: master
